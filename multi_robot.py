import astar
import draw
import path
from datetime import datetime
import random

class RobotRescue(object):
    def __init__(self, grid, robots, goals, heuristic, weight=1):
        self.grid = grid
        self.robots = robots
        self.goals = goals
        self.visited = []
        self.num_expanded = 1
        self.heuristic = heuristic
        self.weight = weight
        # place robots on the grid
        for i, robot in enumerate(robots):
          row, col = robot
          grid[row][col] = i + 1

    def ID(self):
        return str(self.robots)

    def evaluate(self):
      # heuristic: Manhattan distance AVG
      if self.heuristic == 1:
        sum_ = 0
        for robot, goal in zip(self.robots, self.goals):
            sum_ += abs(goal[0] - robot[0]) + abs(goal[1] - robot[1])
        return sum_/float(len(self.robots))

      # heuristic: Manhattan distance MAX
      elif self.heuristic == 2:
        max_ = 0
        for robot, goal in zip(self.robots, self.goals):
            temp = abs(goal[0] - robot[0]) + abs(goal[1] - robot[1])
            if temp > max_:
              max_ = temp
        return max_

      # heuristic: Manhattan distance SUM
      elif self.heuristic == 3:
        sum_ = 0
        for robot, goal in zip(self.robots, self.goals):
            sum_ += abs(goal[0] - robot[0]) + abs(goal[1] - robot[1])
        return sum_

      # heuristic: Manhattan distance weighted SUM
      elif self.heuristic == 4:
        sum_ = 0
        for robot, goal in zip(self.robots, self.goals):
            sum_ += abs(goal[0] - robot[0]) + abs(goal[1] - robot[1])
        return (sum_ * self.weight)

    def solved(self):
        for robot, goal in zip(self.robots, self.goals):
          if robot != goal:
            return False
        return True

    def move(self, move):
        self.visited.append(self.robots[:])
        for m in move:
          self.move_one(m[0], m[1])

    def move_one(self, number, move):
        row, col = self.robots[number-1]
        grid[row][col] = 0
        n_row, n_col = row + move[0], col + move[1]
        self.robots[number-1] = [n_row, n_col]
        grid[n_row][n_col] = number

    def _move_one(self, number, move):
        row, col = self.robots[number-1]
        # grid[row][col] = 0
        n_row, n_col = row + move[0], col + move[1]
        self.robots[number-1] = [n_row, n_col]
        grid[n_row][n_col] = number

    def undo_move(self, move):
        self.visited.pop()
        for m in move:
          self.undo_one(m[0], m[1])

    def undo_one(self, number, move):
        row, col = self.robots[number-1]
        if grid[row][col] == number:
          grid[row][col] = 0
        n_row, n_col = row - move[0], col - move[1]
        self.robots[number-1] = [n_row, n_col]
        grid[n_row][n_col] = number

    def generate_moves(self):
        moves = []
        for robots_ in [range(1, len(self.robots) + 1)]:
          self._generate_moves([], robots_, moves)
        return zip(moves, (1,)*len(moves))

    def _generate_moves(self, partial_move, remaining_robots, moves):
        if len(remaining_robots) == 0:
          moves.append(partial_move[:])
          return
        number = remaining_robots[0]
        robot = self.robots[number - 1]
        for move in self._generate_moves_one(robot, number):
          partial_move.append((number, move))
          self._move_one(number, move)
          self._generate_moves(partial_move, remaining_robots[1:], moves)
          self.undo_one(number, move)
          partial_move.pop()

    def _generate_moves_one(self, position, number):
        row, col = position

        moves = []
        for dr in [-1, 0, 1]:
            for dc in [-1, 0, 1]:
                if (dr*dc == 0 and \
                      0 <= dr + row < len(self.grid) and
                      0 <= dc + col < len(self.grid[dr + row]) and
                      (self.grid[dr + row][dc + col] == 0 or 
                      self.grid[dr + row][dc + col] == number) and
                      [dr+row,dc+col] not in self.visited):

                    
                    moves.append( ([dr, dc]) )
        return moves

###################################################################

# mode = raw_input('Enter mode(S: single with visual, N: multiple with averages): ')
mode = 'S'

grid_size = input('Enter grid size: ')
# grid_size = 5

num = input('Enter number of robots: ')
# num = 7

heuristic = input('Enter heuristic(1: AVG, 2: MAX, 3: SUM, 4: weighted SUM): ')
# heuristic = 4

weight = 1
if heuristic == 4:
  weight = input('Enter weight(0 < x <= 1): ')
  # weight = 0.9


####################################################################
s = datetime.now()
# print datetime.now()
if mode == 'N':
  all_nodes = 0
  all_steps = 0
  iter_ = 100
  failed = 0
  stanja = {0:[], 1:[]}
  st_opt_dolz = {1:0, 2:0, 3:0, 4:0, 5:0, 6:0, 7:0, 8:0, 9:0, 10:0, 11:0, 12:0, 13:0, 14:0, 15:0, 16:0, 17:0, 18:0, 19:0, 20:0, 21:0, 22:0, 23:0, 24:0, 25:0}
  for i in range(iter_):
    if i % 5 == 0 and i != 0:
      print i  
    
    grid = []
    for a in range(0, grid_size):
      grid.append([0] * grid_size)

    start = []
    end = []
    allowed_values = list(range(0, grid_size))
    counter = 0
    while counter < num:
      sx = random.choice(allowed_values)
      sy = random.choice(allowed_values)
      gx = random.choice(allowed_values)
      gy = random.choice(allowed_values)
      if sx == gx and sy == gy or [sx,sy] in start or [gx,gy] in end:
        continue
      start.append([sx,sy])
      end.append([gx,gy])

      counter += 1

    stanja[0].append(start[:])
    stanja[1].append(end[:])


    # starts = [[[3, 2], [4, 2], [1, 0], [0, 0], [2, 0], [0, 1], [0, 3], [3, 1]], [[2, 3], [1, 3], [0, 4], [4, 3], [1, 1], [3, 2], [1, 0], [2, 0]], [[2, 0], [0, 2], [1, 0], [2, 3], [3, 3], [4, 2], [2, 2], [0, 3]], [[1, 4], [3, 0], [0, 1], [1, 1], [1, 2], [3, 2], [4, 1], [2, 1]], [[1, 1], [1, 2], [2, 3], [0, 0], [2, 1], [3, 0], [0, 3], [4, 0]], [[3, 1], [3, 3], [4, 3], [1, 1], [4, 2], [0, 0], [1, 3], [3, 0]], [[4, 4], [2, 4], [1, 2], [3, 3], [2, 2], [1, 1], [4, 3], [1, 3]], [[1, 3], [3, 0], [4, 3], [0, 4], [2, 3], [1, 2], [0, 2], [4, 0]], [[4, 0], [3, 3], [2, 3], [1, 2], [0, 4], [4, 3], [1, 0], [3, 1]], [[0, 0], [1, 4], [0, 1], [3, 4], [3, 0], [1, 1], [2, 4], [1, 0]], [[2, 1], [3, 2], [1, 3], [3, 0], [4, 2], [2, 0], [0, 2], [2, 2]], [[3, 2], [1, 3], [4, 3], [4, 1], [0, 4], [0, 0], [0, 1], [0, 3]], [[0, 4], [1, 1], [1, 4], [1, 3], [3, 3], [2, 3], [3, 0], [4, 2]], [[1, 4], [3, 3], [2, 1], [0, 3], [2, 0], [4, 4], [2, 3], [2, 2]], [[4, 0], [1, 0], [2, 0], [0, 4], [0, 0], [3, 0], [1, 2], [2, 1]], [[4, 4], [1, 3], [4, 3], [2, 2], [1, 1], [3, 0], [2, 0], [2, 3]], [[4, 0], [2, 3], [2, 1], [3, 0], [0, 2], [0, 1], [4, 2], [1, 3]], [[1, 0], [4, 4], [4, 3], [0, 2], [1, 3], [3, 1], [4, 0], [0, 4]], [[2, 1], [1, 0], [1, 3], [2, 2], [4, 1], [4, 0], [3, 2], [1, 1]], [[1, 4], [3, 2], [2, 3], [0, 2], [2, 1], [4, 4], [0, 4], [3, 1]], [[1, 0], [4, 4], [4, 0], [3, 1], [2, 4], [1, 1], [2, 0], [4, 3]], [[3, 1], [4, 4], [4, 2], [0, 3], [2, 3], [2, 4], [4, 0], [0, 2]], [[3, 2], [0, 3], [3, 0], [1, 3], [4, 0], [0, 4], [3, 3], [1, 1]], [[4, 0], [3, 2], [0, 1], [2, 4], [3, 3], [4, 3], [1, 2], [0, 0]], [[4, 4], [1, 0], [0, 2], [4, 1], [1, 2], [2, 4], [0, 3], [1, 3]], [[1, 2], [2, 0], [0, 1], [3, 2], [1, 4], [0, 2], [0, 4], [3, 3]], [[1, 2], [0, 1], [3, 0], [1, 3], [4, 4], [1, 0], [4, 3], [4, 0]], [[3, 1], [0, 1], [3, 2], [2, 0], [0, 0], [2, 1], [1, 3], [0, 2]], [[4, 0], [2, 3], [0, 2], [1, 2], [0, 1], [2, 0], [3, 0], [0, 0]], [[3, 4], [1, 4], [0, 2], [3, 3], [2, 4], [0, 0], [1, 2], [4, 1]], [[0, 4], [3, 4], [0, 0], [4, 1], [1, 1], [2, 4], [0, 3], [1, 3]], [[0, 1], [3, 1], [4, 0], [4, 4], [1, 1], [2, 0], [2, 2], [2, 1]], [[3, 1], [2, 4], [4, 2], [2, 1], [0, 4], [4, 4], [0, 3], [2, 0]], [[2, 4], [1, 0], [4, 2], [2, 1], [2, 3], [3, 1], [2, 2], [1, 3]], [[1, 3], [4, 1], [2, 3], [0, 1], [0, 3], [1, 1], [3, 3], [4, 4]], [[1, 4], [1, 3], [2, 3], [3, 4], [4, 4], [0, 4], [3, 1], [3, 3]], [[4, 4], [2, 0], [1, 3], [2, 2], [3, 3], [3, 4], [4, 2], [0, 2]], [[0, 2], [3, 1], [2, 3], [1, 0], [4, 0], [1, 3], [4, 2], [1, 4]], [[1, 0], [3, 3], [4, 4], [3, 2], [2, 1], [1, 1], [2, 2], [2, 3]], [[3, 0], [1, 3], [3, 4], [1, 1], [2, 2], [0, 2], [0, 1], [3, 2]], [[1, 3], [3, 3], [1, 1], [3, 4], [0, 4], [2, 0], [2, 3], [4, 3]], [[0, 3], [0, 4], [2, 3], [1, 4], [0, 0], [3, 4], [3, 1], [2, 4]], [[0, 3], [1, 1], [2, 1], [4, 1], [1, 3], [0, 4], [2, 2], [3, 4]], [[4, 4], [2, 1], [0, 2], [0, 0], [1, 0], [1, 1], [0, 1], [3, 2]], [[1, 4], [0, 3], [4, 0], [1, 2], [2, 2], [0, 4], [4, 1], [3, 4]], [[1, 4], [0, 3], [0, 0], [1, 1], [0, 1], [3, 3], [2, 0], [4, 2]], [[2, 0], [2, 3], [0, 1], [3, 4], [4, 0], [2, 4], [0, 0], [2, 2]], [[2, 2], [4, 1], [0, 3], [1, 4], [3, 0], [2, 4], [3, 2], [0, 0]], [[2, 1], [4, 3], [3, 4], [4, 0], [0, 0], [2, 2], [3, 0], [2, 0]], [[4, 0], [2, 0], [4, 1], [3, 0], [0, 1], [3, 3], [0, 3], [2, 4]], [[3, 1], [4, 2], [2, 0], [0, 3], [2, 2], [2, 4], [1, 3], [3, 3]], [[4, 2], [2, 0], [3, 3], [1, 0], [4, 0], [1, 2], [1, 3], [4, 1]], [[1, 4], [2, 4], [3, 1], [1, 2], [2, 0], [3, 2], [0, 4], [3, 4]], [[1, 2], [0, 0], [4, 4], [0, 4], [4, 0], [2, 4], [2, 2], [3, 3]], [[1, 0], [4, 1], [2, 2], [0, 3], [2, 4], [2, 3], [0, 4], [4, 2]], [[1, 1], [0, 3], [3, 0], [3, 2], [4, 1], [2, 0], [1, 4], [0, 2]], [[0, 1], [2, 4], [2, 1], [2, 3], [3, 4], [0, 4], [1, 3], [4, 1]], [[0, 3], [1, 4], [2, 2], [1, 1], [0, 4], [3, 2], [2, 0], [4, 3]], [[1, 1], [2, 0], [2, 2], [0, 4], [2, 4], [1, 3], [4, 0], [4, 3]], [[3, 1], [4, 4], [2, 3], [2, 4], [2, 1], [3, 0], [4, 0], [2, 2]], [[2, 4], [4, 0], [2, 1], [4, 2], [3, 4], [1, 4], [4, 3], [3, 3]], [[0, 2], [4, 3], [3, 0], [3, 3], [0, 0], [1, 4], [4, 4], [1, 1]], [[1, 1], [2, 1], [2, 0], [0, 4], [2, 4], [0, 2], [3, 4], [4, 3]], [[1, 3], [2, 3], [1, 1], [3, 3], [4, 0], [0, 2], [2, 0], [2, 1]], [[3, 2], [2, 4], [4, 4], [3, 0], [3, 4], [2, 0], [3, 1], [1, 2]], [[0, 2], [0, 1], [4, 4], [3, 2], [3, 3], [2, 4], [3, 0], [2, 1]], [[2, 0], [1, 0], [0, 2], [3, 4], [4, 1], [3, 0], [1, 2], [4, 4]], [[1, 2], [2, 3], [4, 3], [2, 4], [1, 3], [3, 4], [1, 1], [0, 3]], [[4, 2], [1, 0], [0, 1], [4, 4], [1, 2], [3, 1], [2, 4], [1, 3]], [[1, 4], [0, 0], [0, 1], [3, 4], [3, 3], [3, 0], [4, 3], [3, 1]], [[2, 0], [0, 3], [2, 1], [1, 3], [4, 0], [1, 0], [4, 3], [3, 0]], [[4, 3], [0, 3], [1, 2], [4, 4], [3, 1], [0, 4], [2, 1], [3, 2]], [[0, 3], [4, 1], [3, 1], [1, 1], [3, 0], [2, 3], [1, 2], [2, 1]], [[1, 0], [2, 2], [0, 1], [0, 4], [4, 0], [3, 2], [3, 3], [3, 4]], [[4, 4], [2, 4], [0, 1], [0, 2], [3, 2], [3, 1], [1, 2], [3, 0]], [[0, 3], [0, 0], [2, 3], [2, 4], [4, 4], [0, 2], [2, 1], [3, 0]], [[4, 2], [4, 1], [3, 1], [3, 3], [2, 1], [2, 2], [0, 4], [2, 3]], [[2, 4], [4, 0], [2, 1], [1, 0], [0, 2], [1, 4], [1, 3], [4, 2]], [[3, 4], [3, 2], [3, 1], [0, 3], [2, 2], [1, 4], [1, 0], [4, 0]], [[4, 1], [4, 3], [3, 3], [4, 4], [4, 2], [2, 1], [0, 2], [0, 4]], [[2, 0], [2, 4], [1, 1], [0, 3], [4, 3], [0, 2], [1, 2], [3, 3]], [[0, 2], [4, 4], [1, 3], [4, 3], [0, 3], [1, 1], [4, 0], [3, 4]], [[4, 0], [2, 4], [1, 0], [0, 2], [0, 0], [0, 1], [2, 3], [2, 2]], [[4, 4], [1, 0], [2, 4], [1, 1], [2, 0], [1, 3], [3, 0], [0, 4]], [[0, 1], [3, 1], [4, 0], [1, 4], [2, 4], [1, 1], [3, 0], [4, 2]], [[4, 4], [1, 4], [4, 2], [3, 0], [4, 3], [3, 3], [4, 1], [2, 1]], [[0, 3], [2, 0], [2, 2], [0, 0], [1, 2], [4, 4], [2, 3], [1, 1]], [[3, 1], [2, 1], [3, 2], [3, 0], [4, 0], [0, 4], [1, 3], [3, 4]], [[0, 0], [2, 4], [1, 4], [1, 1], [4, 0], [4, 4], [4, 3], [2, 1]], [[0, 3], [1, 0], [2, 3], [2, 1], [1, 2], [4, 4], [2, 2], [2, 4]], [[1, 1], [2, 2], [1, 3], [4, 0], [2, 1], [3, 3], [0, 1], [0, 4]], [[0, 2], [1, 1], [1, 2], [3, 0], [2, 1], [2, 2], [0, 4], [0, 3]], [[4, 3], [1, 2], [2, 0], [1, 3], [4, 0], [1, 0], [4, 2], [3, 1]], [[2, 2], [0, 1], [4, 2], [4, 1], [1, 2], [3, 4], [3, 1], [4, 3]], [[2, 1], [2, 3], [3, 4], [0, 4], [4, 2], [4, 4], [0, 1], [1, 3]], [[2, 3], [0, 2], [4, 1], [0, 4], [4, 0], [1, 1], [3, 3], [3, 4]], [[3, 4], [0, 4], [2, 4], [3, 2], [3, 3], [1, 2], [0, 2], [1, 1]], [[4, 2], [3, 2], [4, 0], [2, 3], [2, 4], [0, 4], [2, 2], [3, 3]], [[4, 0], [4, 3], [1, 3], [1, 4], [3, 2], [3, 0], [2, 4], [0, 1]], [[3, 0], [0, 1], [1, 0], [2, 1], [4, 4], [4, 1], [3, 3], [2, 3]]]
    # ends = [[[1, 4], [1, 3], [4, 4], [2, 3], [2, 4], [2, 2], [0, 0], [4, 1]], [[0, 1], [2, 1], [4, 3], [0, 3], [3, 1], [0, 0], [4, 2], [2, 4]], [[1, 0], [2, 2], [3, 1], [0, 2], [0, 4], [1, 1], [3, 3], [4, 2]], [[0, 3], [3, 4], [3, 2], [2, 0], [0, 0], [0, 1], [0, 2], [1, 1]], [[2, 1], [4, 3], [4, 0], [0, 1], [3, 1], [3, 2], [2, 4], [1, 1]], [[4, 3], [4, 0], [0, 0], [3, 2], [0, 3], [3, 3], [2, 1], [1, 2]], [[1, 2], [1, 0], [0, 1], [1, 4], [3, 3], [2, 4], [4, 4], [2, 1]], [[4, 2], [4, 1], [2, 4], [1, 2], [1, 0], [2, 2], [2, 0], [3, 0]], [[1, 2], [4, 2], [3, 4], [1, 1], [3, 1], [3, 0], [2, 4], [0, 2]], [[3, 2], [0, 1], [4, 0], [1, 3], [0, 4], [2, 1], [3, 3], [3, 1]], [[4, 1], [0, 2], [2, 1], [1, 0], [1, 4], [3, 1], [0, 3], [3, 2]], [[1, 1], [2, 1], [0, 0], [2, 2], [2, 3], [0, 3], [4, 3], [4, 1]], [[4, 3], [1, 2], [0, 1], [1, 4], [3, 4], [0, 4], [3, 2], [0, 3]], [[2, 0], [4, 0], [1, 2], [4, 2], [2, 1], [2, 2], [0, 1], [1, 4]], [[2, 2], [3, 2], [1, 0], [0, 0], [0, 4], [1, 2], [3, 0], [2, 4]], [[2, 1], [2, 3], [1, 2], [1, 4], [0, 0], [2, 2], [2, 4], [1, 3]], [[2, 4], [0, 3], [1, 4], [3, 3], [2, 0], [0, 2], [4, 4], [3, 1]], [[2, 1], [2, 3], [3, 2], [1, 4], [4, 2], [2, 2], [0, 4], [4, 4]], [[0, 0], [3, 1], [0, 3], [4, 4], [4, 2], [2, 1], [1, 4], [3, 0]], [[4, 4], [3, 3], [2, 2], [2, 3], [4, 2], [3, 1], [0, 1], [1, 1]], [[2, 3], [0, 1], [1, 3], [1, 4], [4, 1], [3, 1], [2, 2], [3, 4]], [[0, 3], [4, 0], [4, 1], [2, 2], [1, 2], [4, 4], [3, 2], [3, 0]], [[4, 3], [4, 2], [2, 3], [0, 4], [2, 1], [1, 0], [2, 2], [4, 0]], [[1, 4], [2, 4], [1, 1], [4, 3], [4, 1], [2, 1], [2, 2], [2, 0]], [[3, 1], [3, 3], [0, 0], [4, 2], [2, 1], [2, 3], [3, 0], [1, 1]], [[4, 1], [3, 4], [4, 2], [4, 0], [4, 4], [0, 4], [0, 0], [2, 4]], [[2, 1], [1, 2], [4, 0], [4, 1], [1, 4], [0, 4], [1, 1], [3, 4]], [[4, 2], [3, 2], [0, 4], [2, 2], [3, 1], [4, 1], [4, 0], [1, 4]], [[4, 3], [1, 2], [4, 2], [4, 0], [4, 4], [1, 0], [0, 2], [3, 1]], [[2, 3], [0, 0], [3, 4], [4, 0], [0, 1], [0, 2], [2, 1], [4, 2]], [[2, 0], [1, 0], [1, 4], [4, 3], [4, 4], [0, 3], [4, 0], [2, 1]], [[4, 4], [0, 0], [4, 2], [1, 2], [2, 4], [1, 0], [3, 0], [1, 1]], [[4, 0], [1, 4], [2, 3], [0, 2], [4, 1], [1, 3], [0, 4], [2, 4]], [[2, 1], [2, 4], [1, 2], [4, 1], [4, 2], [3, 4], [1, 3], [0, 0]], [[3, 0], [1, 2], [4, 1], [3, 1], [0, 4], [4, 0], [2, 3], [4, 3]], [[1, 2], [4, 4], [3, 0], [4, 3], [2, 0], [4, 2], [3, 2], [0, 0]], [[4, 1], [4, 4], [4, 0], [0, 0], [0, 2], [2, 3], [0, 3], [3, 0]], [[1, 1], [3, 3], [3, 0], [0, 4], [4, 2], [3, 2], [0, 1], [1, 2]], [[2, 0], [4, 0], [0, 3], [2, 3], [4, 4], [0, 1], [3, 1], [4, 3]], [[0, 3], [0, 1], [2, 2], [2, 1], [3, 3], [4, 2], [1, 2], [4, 0]], [[4, 4], [1, 3], [2, 2], [2, 0], [2, 4], [4, 3], [4, 2], [3, 3]], [[3, 4], [1, 1], [0, 0], [3, 0], [1, 0], [2, 4], [3, 3], [0, 4]], [[0, 2], [2, 4], [1, 0], [0, 0], [4, 1], [3, 0], [4, 0], [0, 4]], [[0, 3], [0, 4], [2, 2], [3, 1], [2, 0], [3, 2], [4, 4], [2, 4]], [[3, 0], [3, 4], [3, 3], [1, 0], [0, 1], [0, 2], [2, 2], [3, 2]], [[0, 3], [3, 0], [2, 0], [0, 1], [3, 1], [2, 3], [3, 4], [0, 2]], [[2, 2], [0, 3], [1, 4], [0, 0], [2, 1], [1, 1], [1, 2], [3, 3]], [[1, 0], [2, 1], [1, 3], [4, 2], [3, 1], [4, 3], [0, 1], [4, 4]], [[2, 2], [2, 0], [4, 2], [1, 0], [3, 0], [4, 0], [0, 1], [4, 1]], [[2, 4], [2, 1], [3, 0], [1, 4], [2, 3], [2, 0], [3, 4], [1, 0]], [[3, 3], [3, 4], [0, 4], [2, 4], [4, 0], [3, 1], [1, 1], [3, 0]], [[1, 4], [1, 2], [4, 3], [2, 0], [0, 4], [3, 3], [2, 2], [2, 4]], [[4, 2], [2, 2], [3, 4], [3, 2], [0, 0], [0, 3], [1, 3], [0, 2]], [[1, 1], [0, 1], [1, 2], [2, 4], [4, 2], [0, 0], [3, 0], [0, 4]], [[1, 1], [3, 0], [1, 4], [3, 1], [1, 3], [2, 0], [4, 4], [2, 1]], [[3, 3], [0, 2], [2, 2], [0, 1], [4, 3], [1, 2], [4, 1], [2, 0]], [[2, 0], [0, 3], [1, 1], [0, 0], [0, 1], [3, 4], [1, 2], [3, 3]], [[3, 0], [3, 2], [1, 2], [2, 2], [2, 4], [1, 3], [1, 1], [4, 4]], [[2, 0], [1, 4], [3, 0], [4, 2], [4, 3], [3, 2], [1, 2], [4, 4]], [[0, 3], [1, 4], [3, 0], [0, 2], [1, 3], [0, 4], [3, 3], [0, 1]], [[3, 2], [1, 2], [3, 3], [4, 4], [2, 4], [0, 3], [1, 1], [3, 1]], [[3, 2], [0, 4], [2, 0], [1, 3], [4, 2], [1, 0], [1, 1], [3, 0]], [[4, 0], [3, 1], [3, 3], [4, 3], [4, 1], [2, 1], [0, 4], [1, 2]], [[1, 2], [0, 3], [4, 1], [0, 1], [4, 4], [2, 0], [1, 1], [3, 2]], [[1, 0], [0, 4], [1, 3], [3, 3], [4, 3], [1, 4], [1, 1], [0, 0]], [[1, 3], [1, 0], [2, 4], [0, 4], [2, 3], [1, 1], [3, 3], [0, 1]], [[3, 2], [4, 2], [2, 2], [0, 2], [3, 4], [3, 3], [0, 4], [1, 3]], [[3, 4], [3, 2], [4, 2], [0, 4], [4, 0], [1, 3], [1, 4], [0, 1]], [[1, 1], [4, 0], [0, 2], [1, 0], [4, 2], [2, 3], [4, 4], [0, 0]], [[1, 3], [1, 0], [2, 3], [2, 1], [4, 1], [1, 1], [3, 4], [0, 4]], [[4, 4], [0, 1], [2, 0], [1, 4], [2, 1], [4, 3], [1, 0], [0, 3]], [[2, 1], [0, 0], [1, 0], [0, 4], [1, 1], [3, 2], [3, 4], [1, 4]], [[3, 3], [1, 4], [0, 4], [4, 2], [4, 4], [1, 3], [0, 0], [3, 1]], [[0, 3], [1, 4], [0, 2], [4, 1], [1, 2], [2, 3], [1, 0], [4, 2]], [[4, 3], [3, 4], [3, 3], [4, 4], [4, 1], [2, 3], [0, 4], [0, 0]], [[3, 4], [1, 2], [0, 0], [3, 2], [3, 0], [2, 1], [4, 4], [1, 1]], [[2, 2], [0, 1], [2, 3], [3, 2], [4, 4], [0, 4], [4, 3], [0, 3]], [[1, 3], [2, 1], [3, 4], [4, 3], [0, 0], [4, 2], [1, 2], [1, 1]], [[2, 4], [2, 0], [4, 1], [2, 3], [3, 1], [1, 2], [4, 4], [0, 2]], [[3, 2], [3, 3], [4, 0], [4, 3], [2, 3], [3, 4], [2, 0], [3, 1]], [[1, 2], [2, 1], [3, 4], [1, 4], [4, 1], [2, 0], [3, 0], [1, 0]], [[1, 4], [2, 2], [4, 1], [4, 4], [1, 1], [0, 3], [1, 2], [0, 2]], [[3, 2], [3, 3], [4, 4], [3, 0], [2, 3], [2, 0], [4, 0], [2, 1]], [[0, 1], [4, 1], [0, 4], [0, 0], [3, 0], [1, 1], [3, 3], [3, 1]], [[4, 2], [1, 2], [2, 1], [1, 3], [0, 1], [2, 3], [1, 1], [0, 0]], [[3, 2], [4, 2], [4, 3], [3, 3], [1, 4], [3, 1], [1, 0], [2, 4]], [[3, 3], [0, 3], [3, 0], [3, 1], [3, 4], [0, 4], [1, 4], [4, 4]], [[3, 3], [4, 1], [4, 4], [0, 3], [3, 4], [1, 4], [3, 1], [0, 4]], [[1, 4], [1, 1], [0, 1], [4, 1], [0, 3], [0, 4], [2, 2], [3, 1]], [[2, 3], [4, 4], [3, 2], [0, 0], [1, 0], [4, 3], [2, 1], [1, 4]], [[4, 4], [0, 4], [3, 2], [4, 2], [4, 0], [4, 3], [3, 0], [1, 4]], [[1, 1], [3, 3], [3, 1], [1, 2], [4, 4], [3, 4], [1, 4], [4, 3]], [[3, 2], [4, 4], [3, 3], [0, 3], [1, 2], [1, 4], [2, 3], [3, 0]], [[0, 4], [1, 3], [2, 3], [1, 4], [2, 2], [2, 4], [0, 2], [2, 1]], [[0, 3], [1, 3], [3, 3], [4, 2], [3, 0], [0, 4], [1, 2], [2, 1]], [[0, 3], [3, 2], [2, 0], [4, 4], [2, 2], [4, 0], [4, 2], [1, 4]], [[1, 4], [2, 3], [0, 2], [3, 1], [4, 4], [3, 3], [4, 3], [3, 2]], [[1, 2], [1, 1], [0, 1], [4, 3], [3, 3], [4, 0], [0, 4], [3, 2]], [[0, 0], [1, 1], [3, 1], [2, 0], [4, 4], [0, 1], [4, 3], [2, 2]], [[1, 4], [1, 3], [1, 1], [2, 3], [3, 4], [2, 1], [4, 2], [3, 0]]]

    # start = starts[i]
    # end = ends[i]


    if i == 0:
      print "Number of robots:", num
    #   print "Start positions:", start
    #   print "End   positions:", end

    rr = RobotRescue(grid, start, end, heuristic, weight)

    resitev = astar.A(rr)
    
    if resitev == None:
      print "Failed"
      failed += 1
      continue

    paths, steps = path.path(grid, start, resitev, 0)

    st_opt_dolz[steps] += 1


    all_nodes += rr.num_expanded
    all_steps += steps

    # print "Expanded nodes:", rr.num_expanded
    # print "Number of steps:", steps
    # if resitev != None:
    #   draw.draw(grid, paths)

  with open("stanja.txt", "a") as output:
    output.write(str(stanja[0]) + "\n")
    output.write(str(stanja[1]) + "\n")

  with open("optimalne-dolzine.txt", "a") as output:
    output.write(str(st_opt_dolz) + "\n")

  avg_nodes = all_nodes/(iter_-failed)
  avg_steps = all_steps/float((iter_-failed))

  print "Failed:", failed
  print "Average expanded nodes:", avg_nodes
  print "Average number of steps:", avg_steps

  with open("A*_nodes_5x5.txt", "a") as output:
    output.write(str(avg_nodes) + ", ")

  with open("A*_steps_5x5.txt", "a") as output:
    output.write(str(avg_steps) + ", ")

  e = datetime.now()
  # print datetime.now()
  print e - s


##################################################################################

if mode == 'S':
  grid = []

  for i in range(0, grid_size):
    grid.append([0] * grid_size)

  start = []
  end = []
  allowed_values = list(range(0, grid_size))
  counter = 0
  while counter < num:
    sx = random.choice(allowed_values)
    sy = random.choice(allowed_values)
    gx = random.choice(allowed_values)
    gy = random.choice(allowed_values)
    if sx == gx and sy == gy or [sx,sy] in start or [gx,gy] in end:
      continue
    start.append([sx,sy])
    end.append([gx,gy])
    counter += 1

  # start = [[1, 4], [3, 2], [3, 1], [0, 2], [1, 3]]
  # end   = [[1, 3], [2, 1], [2, 4], [2, 3], [4, 3]]

  print "\nNumber of robots:", num
  print "Start positions:", start
  print "End   positions:", end

  rr = RobotRescue(grid, start, end, heuristic, weight)
  
  resitev = astar.A(rr)

  # with open("optimal_A*.txt", "a") as output:
  #   output.write("Number of robots: " + str(num+1) + "\n")
  #   output.write("start = " + str(start) + "\n")
  #   output.write("end   = " + str(end) + "\n")
  #   output.write("Optimal A* expanded nodes: " + str(rr.num_expanded) + " (Manhattan distance)\n\n")

  e = datetime.now()
  # print datetime.now()
  print "Plan time:", e - s

  if resitev != None:
    paths, steps = path.path(grid, start, resitev)
    print "Expanded nodes:", rr.num_expanded
    print "Number of steps:", steps
  
    draw.draw(grid, paths)

  else:
    print 'Can\'t find optimal paths'
    print "Expanded nodes:", rr.num_expanded